<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Lantern</title>
    <link rel="stylesheet" href="grapick.min.css">
    <!-- <script src="grapick.min.js"></script> -->
    <script src="grapick.min.js"></script>
    <script src="default.js"></script>
    <!-- <link href="https://fonts.googleapis.com/css?family=Romanesco" rel="stylesheet"> -->
  </head>
  <body>
    <style>
    html {
      height: 100%
    }
    body {
        background-color: #aaa;
    }

    .container {
      position: absolute;
      width: 600px;
      height: 300px;
      left: 0;
      right: 0;
      margin: auto;
      top: 0;
      bottom: 0;
    }

    .brand {
      user-select: none;
      margin: -12rem 0 3rem;
      text-align: center;
      font-size: 2rem;
      font-weight: 50;
      color: white;
      <!-- font-family: 'Romanesco', cursive; -->
      /*text-shadow: 2px 0 0 #555, -2px 0 0 #555, 0 2px 0 #555, 0 -2px 0 #555, 1px 1px #555, -1px -1px 0 #555, 1px -1px 0 #555, -1px 1px 0 #555;*/
    }

    .grapick-cont {
      box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
      border-radius: 3px;
      margin: -15px;
      padding: 25px 15px;
      width: 100%;
      height: 100px;
      background: white;
    }

    .grp-preview {
      border-radius: 3px;
    }

    .inputs {
      margin: 25px 0px 15px;
    }

    .form-control {
      background-color: transparent;
      border: 1px solid #ccc;
      height: 30px;
      width: 49%;
    }
    .custom-range {
      background-color: transparent;
      border: 1px solid #111;
      height: 30px;
      width: 49%;
    }
    </style>
    <div class="container">
      <h1 class="brand">Light My Fire</h1>
      <div class="grapick-cont">
          <div id="grapick1"></div>
          <div class="inputs">
			<label for="customRange1">Speed</label>
			<input type="range" class="custom-range1" min="-5" max="5" id="speed1" value = "0">
			<input type="button" class="button-css" id="btn1" value = "Show">
			<label for="customRange1">Heat</label>
			<input type="range" class="custom-range11" min="-5" max="5" id="heat1" value = "0">
          </div>
      </div>

      <div class="grapick-cont">
          <div id="grapick2"></div>
          <div class="inputs">
			<label for="customRange2">Speed</label>
			<input type="range" class="custom-range2" min="-5" max="5" id="speed2" value = "0">
			<input type="button" class="button-css" id="btn2" value = "Show">
			<label for="customRange22">Heat</label>
			<input type="range" class="custom-range22" min="-5" max="5" id="heat2" value = "0">
          </div>
      </div>

      <div class="grapick-cont">
          <div id="grapick3"></div>
          <div class="inputs">
			<label for="customRange3">Speed</label>
			<input type="range" class="custom-range3" min="-5" max="5" id="speed3" value = "0">
			<input type="button" class="button-css" id="btn3" value = "Show">
			<label for="customRange33">Heat</label>
			<input type="range" class="custom-range33" min="-5" max="5" id="heat3" value = "0">
          </div>
      </div>

      <div class="grapick-cont">
          <div id="grapick4"></div>
          <div class="inputs">
			<label for="customRange4">Speed</label>
			<input type="range" class="custom-range4" min="-5" max="5" id="speed4" value = "0">
			<input type="button" class="button-css" id="btn4" value = "Show">
			<label for="customRange44">Heat</label>
			<input type="range" class="custom-range44" min="-5" max="5" id="heat4" value = "0">
          </div>
      </div>

	  <div class ="grapick-cont">
		<a href = "status.htm">HW Status </a> <a href = "edit.htm">Edit Files</a>
		</div>
    </div>

    <!-- <script type="text/javascript" src = "file:///C:/Users/Peti/Documents/Arduino/RGBWW_Fire_2018_ESP/data/fire.js"></script> -->
    <!-- <script type="text/javascript" src = "./fire.js"></script> -->
    <script type="text/javascript">
	
	/*
	 * Takes a 3 or 6-digit hex color code, and an optional 0-255 numeric alpha value
	 */
	function rgbToHex(r, g, b) {
		return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
	}
	function hexToRGB(hex, alpha) {
	  if (typeof hex !== 'string' || hex[0] !== '#') {
		console.log ("Not a hex color:");
		console.log(hex);
		
		return null; // or return 'transparent'
		}
	  const stringValues = (hex.length === 4)
			? [hex.slice(1, 2), hex.slice(2, 3), hex.slice(3, 4)].map(n => `${n}${n}`)
			: [hex.slice(1, 3), hex.slice(3, 5), hex.slice(5, 7)];
	  const intValues = stringValues.map(n => parseInt(n, 16));
	  return {r:intValues[0],g:intValues[1],b:intValues[2]};
	}
	
	function gradientStateToJSON(gradientvar){
		var safetext = gradientvar.getSafeValue().split('%');
		var handlearray = [];
		for (var i = 0; i< safetext.length -1; i++){
			var rgbp = safetext[i].slice(safetext[i].lastIndexOf('(')+1).replace(')',',').split(',');
			rgbp = rgbp.map(parseFloat);
			handlearray.push({pos:rgbp[3], r:rgbp[0],g:rgbp[1],b:rgbp[2]});
		}
		//console.log(JSON.stringify(handlearray)); //[{"pos":0,"r":0,"g":0,"b":0},{"pos":28.6667,"r":255,"g":255,"b":0},{"pos":44.3333,"r":255,"g":0,"b":0},{"pos":100,"r":255,"g":255,"b":255}]
		return handlearray;
	}

  let gradients = {active:1,grad1 : "None", grad1speed : 0,grad2 : "None", grad2speed :0, grad3 : "None",grad3speed: 0, grad4 : "None", grad4speed:0, grad1heat:0, grad2heat:0, grad3heat:0, grad4heat:0,};
  gradients = JSON.parse(defaultgradient);
  //----------------Fetch JSON defaults from server
	/*let url = 'defaults.json';

	fetch(url)
	.then(res => res.json())
	.then((out) => {
		console.log('Checkout this JSON! ', out);
		gradients = JSON.parse(JSON.stringify(out));
	})
	
	.catch(err => { throw err });*/

	

  function sendGradientsJSON(jsonstr){
	//gradientStateToJSON(gp1);
	/*
	gradients.grad1 = gp1.getSafeValue(); //linear-gradient(to right, rgb(0, 0, 0) 0%, rgb(133, 0, 0) 22%, rgb(255, 0, 0) 50%, rgb(255, 255, 0) 80%, rgb(255, 255, 255) 100%)
	var h = []
	for (var handle in gp1.getHandlers()){ //FUCKED todo
		var hand1 = gp1.getHandler(handle);
		gradients.grad1= {pos:hand1.getPosition(),c: hexToRGB(hand1.getColor())};
		h.push({pos:hand1.getPosition(),c: hexToRGB(hand1.getColor())});
		console.log(hand1.getColor());
		var color = hexToRGB(hand1.getColor());
		console.log(color);
		console.log(hand1.getColor().r);
		console.log(gradients);
	}
	gradients.grad1 = h;*/
	
	var jsonobj = JSON.stringify(gradients);
	const Http = new XMLHttpRequest();
	const url='/setGradients?setGradient='+jsonobj;
	console.log("GETTING URL:"+url);

	Http.open("GET", url );
	Http.send();
	Http.onreadystatechange=(e)=>{console.log(Http.responseText)};
  }
  
  function createGrapick(id, grapicksettings){
	let mygp = new Grapick({
		el: '#grapick'+id,
		direction: 'to right',
		min: 0,
		max : 100,
		height: '40px',
	});
	mygp.id = id;
	mygp.settings = grapicksettings;
	if (grapicksettings == "None"){
		mygp.addHandler(0, '#000000', 0); 
	mygp.addHandler(50, '#FF0000', 0); 
		mygp.addHandler(80, '#FFFF00', 0); 
	mygp.addHandler(100, '#FFFFFF', 0);
	}else{
	for (let handleidx in grapicksettings){
		let handle = grapicksettings[handleidx];
		mygp.addHandler(handle.pos, rgbToHex(handle.r,handle.g,handle.b));
	}
	}
	mygp.on('change',function(complete){
		document.body.style.backgroundImage = mygp.getSafeValue();
		if (complete){
			gradients["grad"+mygp.id] = gradientStateToJSON(mygp);
			gradients.active = mygp.id;
			console.log("Change Complete "+mygp.id);
			sendGradientsJSON("noneyet"+mygp.id);
		}
	})
	mygp.emit('change');
	mygp.btn = document.getElementById('btn'+mygp.id);
	mygp.speed = document.getElementById('speed'+mygp.id);
	mygp.heat = document.getElementById('heat'+mygp.id);
	mygp.activate = function activate(){
		document.body.style.backgroundImage = mygp.getSafeValue();
		console.log("Activate:"+mygp.id);
		gradients.active = 1;
		gradients["grad"+mygp.id+"speed"] = Math.floor(mygp.speed.value*255.0/100.0);
		gradients["grad"+mygp.id+"heat"] = Math.floor(mygp.heat.value*255.0/100.0);
		sendGradientsJSON("noneyet"+mygp.id);
	} 
	mygp.btn.addEventListener('click',mygp.activate);
	mygp.speed.addEventListener('click',mygp.activate);
	mygp.heat.addEventListener('click',mygp.activate);
	return mygp;
  }
  let gp1 = createGrapick('1',gradients.grad1);
  let gp2 = createGrapick('2',gradients.grad2);
  let gp3 = createGrapick('3',gradients.grad3);
  let gp4 = createGrapick('4',gradients.grad4);


	let gps = [gp1];

	</script> 
  </body>
</html>
